-- Create the database (if it doesn't exist) and use it
CREATE DATABASE IF NOT EXISTS project_db;
USE project_db;

-- Drop tables if they exist to avoid duplication errors
DROP TABLE IF EXISTS COMMENT;
DROP TABLE IF EXISTS PROJECT;
DROP TABLE IF EXISTS USER;
DROP TABLE IF EXISTS ADMIN;

-- Create the ADMIN table
CREATE TABLE ADMIN (
    admin_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE, -- Ensure unique usernames
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE, -- Ensure unique emails
    full_name VARCHAR(100) NOT NULL UNIQUE, -- Ensure unique full names
    last_login DATETIME
);

-- Create the USER table
CREATE TABLE USER (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE, -- Ensure unique usernames
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE, -- Ensure unique emails
    full_name VARCHAR(100) NOT NULL UNIQUE, -- Ensure unique full names
    last_login DATETIME
);

-- Create the PROJECT table
CREATE TABLE PROJECT (
    project_id INT AUTO_INCREMENT PRIMARY KEY,
    intro_picture VARCHAR(255),
    title VARCHAR(255) NOT NULL,
    intro TEXT,
    picture1 VARCHAR(255),
    paragraph1 TEXT,
    picture2 VARCHAR(255),
    paragraph2 TEXT,
    picture3 VARCHAR(255),
    paragraph3 TEXT,
    technologies_used VARCHAR(255),
    date_created DATETIME DEFAULT CURRENT_TIMESTAMP,
    author_id INT,
    num_likes INT DEFAULT 0,
    num_comments INT DEFAULT 0,
    github_link VARCHAR(255),
    demo_url VARCHAR(255),
    FOREIGN KEY (author_id) REFERENCES ADMIN(admin_id) ON DELETE CASCADE
);

-- Create the COMMENT table
CREATE TABLE COMMENT (
    comment_id INT AUTO_INCREMENT PRIMARY KEY,
    project_id INT,
    user_id INT,
    content TEXT NOT NULL,
    date_created DATETIME DEFAULT CURRENT_TIMESTAMP,
    parent_comment_id INT,
    num_likes INT DEFAULT 0,
    FOREIGN KEY (project_id) REFERENCES PROJECT(project_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES USER(user_id) ON DELETE CASCADE,
    FOREIGN KEY (parent_comment_id) REFERENCES COMMENT(comment_id) ON DELETE CASCADE
);

-- Sample Data for Testing

-- Insert a sample admin
INSERT INTO ADMIN (username, password, email, full_name, last_login)
VALUES ('admin1', 'password123', 'admin1@example.com', 'Nathan Gopee', NOW());

-- Insert sample users
INSERT INTO USER (username, password, email, full_name, last_login)
VALUES 
('user1', 'password123', 'user1@example.com', 'User One', NOW()),
('user2', 'password123', 'user2@example.com', 'User Two', NOW());

-- Insert sample projects by the admin
INSERT INTO PROJECT (intro_picture, title, intro, picture1, paragraph1, picture2, paragraph2, picture3, paragraph3, technologies_used, author_id, num_likes, num_comments, github_link, demo_url)
VALUES 
-- Project 1: Danmomo
('/img/danmomo_intro.jpg', 'Danmomo', 'A puzzle game with fruit merging mechanics, featuring multiplayer and single-player modes.', '/img/danmomo_pic1.jpg', 'Implemented multiplayer and live score tracking.', '/img/danmomo_pic2.jpg', 'Enhanced UI with bomb mechanics and cracking animations.', '/img/danmomo_pic3.jpg', 'Integrated CI/CD for deployment to Itch.io.', 'Godot Engine, GDScript, GitHub Actions', 1, 15, 5, 'https://github.com/ndg8743/Danmomo', 'https://ndg8743.itch.io/danmomo'),

-- Project 2: QView3D
('/img/qview3d_intro.jpg', 'QView3D', 'A remote 3D printing management software.', '/img/qview3d_pic1.jpg', 'Improved reliability for remote 3D printing jobs.', '/img/qview3d_pic2.jpg', 'Added column resizing and better user management.', '/img/qview3d_pic3.jpg', 'Implemented a printer emulator and Docker support.', 'Python, Flask, Vue.js, Docker', 1, 20, 7, 'https://github.com/ndg8743/QView3D', 'https://qview3d.example.com'),

-- Project 3: Fitness Tracker
('/img/fitness_tracker_intro.jpg', 'Fitness Tracker', 'A web app to log meals, exercises, and share progress with friends.', '/img/fitness_tracker_pic1.jpg', 'Integrated login, search, and progress tracking.', '/img/fitness_tracker_pic2.jpg', 'Enhanced UI with admin privileges and user views.', '/img/fitness_tracker_pic3.jpg', 'Created features for meal logging and exercise tracking.', 'Vue.js, TypeScript, Bulma, Node.js', 1, 10, 3, 'https://github.com/ndg8743/FitnessTracker', 'https://tracker.example.com'),

-- Project 4: Crushica
('/img/crushica_intro.jpg', 'Crushica', 'A dynamic puzzle game inspired by Suika Game.', '/img/crushica_pic1.jpg', 'Implemented juice, bombs, and glass-breaking mechanics.', '/img/crushica_pic2.jpg', 'Added real-time scoring and leaderboard functionality.', '/img/crushica_pic3.jpg', 'Designed multiplayer survival mode with unique features.', 'Godot Engine, GDScript, MySQL', 1, 25, 10, 'https://github.com/ndg8743/Crushica', 'https://crushica.example.com');

-- Insert comments for the projects
INSERT INTO COMMENT (project_id, user_id, content, date_created, num_likes)
VALUES 
(1, 1, 'Danmomo is incredibly fun! The multiplayer mode is great!', NOW(), 12),
(2, 2, 'QView3D has been a game changer for our 3D printing lab.', NOW(), 15),
(3, 1, 'The Fitness Tracker app really helps me stay on track!', NOW(), 8),
(4, 2, 'Crushica is highly addictive and well-designed.', NOW(), 20);

-- Insert a reply to the first comment
INSERT INTO COMMENT (project_id, user_id, content, date_created, parent_comment_id, num_likes)
VALUES 
(1, 2, 'Thanks for the feedback! Glad you enjoyed it!', NOW(), 1, 5);

-- Commands to Verify the Setup

-- Select the database
USE project_db;

-- Show all tables in the selected database
SHOW TABLES;

-- View the structure of each table
DESCRIBE ADMIN;
DESCRIBE USER;
DESCRIBE PROJECT;
DESCRIBE COMMENT;

-- Queries for verifying relationships and data

-- View all admins
SELECT * FROM ADMIN;

-- View all users
SELECT * FROM USER;

-- View all projects with admin info
SELECT 
    PROJECT.project_id, 
    PROJECT.title, 
    PROJECT.intro, 
    PROJECT.paragraph1, 
    PROJECT.paragraph2, 
    PROJECT.paragraph3, 
    PROJECT.date_created, 
    ADMIN.full_name AS admin_name
FROM PROJECT
JOIN ADMIN ON PROJECT.author_id = ADMIN.admin_id;

-- View all comments with user info and project info
SELECT 
    COMMENT.comment_id, 
    COMMENT.content, 
    COMMENT.num_likes, 
    COMMENT.date_created, 
    USER.full_name AS user_name, 
    PROJECT.title AS project_title
FROM COMMENT
JOIN USER ON COMMENT.user_id = USER.user_id
JOIN PROJECT ON COMMENT.project_id = PROJECT.project_id;

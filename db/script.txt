-- Create the database (if it doesn't exist) and use it
CREATE DATABASE IF NOT EXISTS project_db;
USE project_db;

-- Drop tables if they exist to avoid duplication errors
DROP TABLE IF EXISTS COMMENT;
DROP TABLE IF EXISTS PROJECT;
DROP TABLE IF EXISTS USER;
DROP TABLE IF EXISTS ADMIN;

-- Create the ADMIN table
CREATE TABLE ADMIN (
    admin_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE, -- Ensure unique usernames
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE, -- Ensure unique emails
    full_name VARCHAR(100) NOT NULL UNIQUE, -- Ensure unique full names
    last_login DATETIME
);

-- Create the USER table
CREATE TABLE USER (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE, -- Ensure unique usernames
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE, -- Ensure unique emails
    full_name VARCHAR(100) NOT NULL UNIQUE, -- Ensure unique full names
    last_login DATETIME
);

-- Create the PROJECT table
CREATE TABLE PROJECT (
    project_id INT AUTO_INCREMENT PRIMARY KEY,
    intro_picture VARCHAR(255),
    title VARCHAR(255) NOT NULL,
    intro TEXT,
    picture1 VARCHAR(255),
    paragraph1 TEXT,
    picture2 VARCHAR(255),
    paragraph2 TEXT,
    picture3 VARCHAR(255),
    paragraph3 TEXT,
    technologies_used VARCHAR(255),
    date_created DATETIME DEFAULT CURRENT_TIMESTAMP,
    author_id INT,
    num_likes INT DEFAULT 0,
    num_comments INT DEFAULT 0,
    github_link VARCHAR(255),
    demo_url VARCHAR(255),
    FOREIGN KEY (author_id) REFERENCES ADMIN(admin_id) ON DELETE CASCADE
);

-- Create the COMMENT table
CREATE TABLE COMMENT (
    comment_id INT AUTO_INCREMENT PRIMARY KEY,
    project_id INT,
    user_id INT,
    content TEXT NOT NULL,
    date_created DATETIME DEFAULT CURRENT_TIMESTAMP,
    parent_comment_id INT,
    num_likes INT DEFAULT 0,
    FOREIGN KEY (project_id) REFERENCES PROJECT(project_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES USER(user_id) ON DELETE CASCADE,
    FOREIGN KEY (parent_comment_id) REFERENCES COMMENT(comment_id) ON DELETE CASCADE
);

-- Sample Data for Testing

-- Insert a sample admin
INSERT INTO ADMIN (username, password, email, full_name, last_login)
VALUES ('admin1', 'password123', 'admin1@example.com', 'Admin User', NOW());

-- Insert sample users
INSERT INTO USER (username, password, email, full_name, last_login)
VALUES 
('user1', 'password123', 'user1@example.com', 'User One', NOW()),
('user2', 'password123', 'user2@example.com', 'User Two', NOW());

-- Insert sample projects by the admin
INSERT INTO PROJECT (intro_picture, title, intro, picture1, paragraph1, picture2, paragraph2, picture3, paragraph3, technologies_used, author_id, num_likes, num_comments, github_link, demo_url)
VALUES 
('/img/intro1.jpg', 'Fibonacci Fractal Engine', 'Java app generating fractal images using the Fibonacci sequence.', '/img/fractal1.jpg', 'Built a multithreaded distributed computing platform with optimizations.', '/img/fractal2.jpg', 'Integrated RESTful and gRPC services for data exchange.', NULL, NULL, 'Java, TypeScript, Vue, JUnit, REST API, Maven, Mockito, Docker, gRPC, Gson, Protobuf', 1, 10, 4, 'https://github.com/ndg8743/fibonacci-fractal', NULL),
('/img/intro2.jpg', 'To-Do List Managed on AWS Cloud', 'Developed a scalable to-do app.', '/img/todolist1.jpg', 'Implemented FastAPI backend and React frontend for CRUD operations.', '/img/todolist2.jpg', 'Used AWS CDK for Lambda functions and DynamoDB.', NULL, NULL, 'Python, TypeScript, Tailwind, Neat, FastAPI, Docker, Git, AWS Lambda, DynamoDB, Pytest', 1, 15, 6, 'https://github.com/ndg8743/todolist-aws', NULL),
('/img/intro3.jpg', 'QView3D - 3D Printer Web App', 'Led development of a 3D printer control app for the HVAMC Lab.', '/img/qview3d1.jpg', 'Integrated real-time multi-printer communication using WebSockets.', '/img/qview3d2.jpg', 'Added column resizing, compatibility for other printers, and USB communication.', NULL, NULL, 'Python, TypeScript, Vue, Flask, SQLite, Node, USB Serial, G-code, HTML/CSS, Go, WebSocket', 1, 20, 5, 'https://github.com/ndg8743/qview3d', NULL),
('/img/intro4.jpg', 'Fitness Tracker - Web App', 'A full-stack app for managing exercises/meals with login functionality.', '/img/fitness1.jpg', 'Built a Vue frontend using Composition API with Bulma for responsive design.', '/img/fitness2.jpg', 'Integrated RESTful and Express/Node backends.', NULL, NULL, 'Vue, TypeScript, Node, Express, REST API, Bulma, Git', 1, 12, 3, 'https://github.com/ndg8743/fitness-tracker', NULL),
('/img/intro5.jpg', 'Danmomo - Multiplayer Puzzle Game', '2D multiplayer puzzle game featuring fruit-merging mechanics.', '/img/danmomo1.jpg', 'Utilized Godot for backend logic and deployed scalable server infrastructure.', '/img/danmomo2.jpg', 'Implemented efficient network handling and game state synchronization.', NULL, NULL, 'Godot, GDScript, Node, WebSockets, AWS, Git', 1, 18, 7, 'https://github.com/ndg8743/danmomo', NULL),
('/img/intro6.jpg', 'Personal Website Blog', 'Full-stack personal website with user registration and login.', '/img/personal1.jpg', 'Implemented SQL database for user management and data handling.', '/img/personal2.jpg', 'Created interactive frontend using HTML, CSS, and JavaScript.', NULL, NULL, 'JavaScript, Node, Express, SQL, HTML, CSS, Git', 1, 9, 2, 'https://github.com/ndg8743/personal-website', 'https://ndg8743.github.io');

-- Insert comments for the projects
INSERT INTO COMMENT (project_id, user_id, content, date_created, num_likes)
VALUES 
(1, 1, 'Love the mechanics of Fibonacci Fractal Engine!', NOW(), 20),
(2, 2, 'The To-Do List app is extremely helpful.', NOW(), 15),
(3, 1, 'QView3D has revolutionized my 3D printing workflow.', NOW(), 18),
(4, 2, 'The Fitness Tracker is great for managing goals.', NOW(), 10),
(5, 1, 'Danmomo is so addictive and fun!', NOW(), 12),
(6, 2, 'The Personal Website is really well designed.', NOW(), 8);

-- Insert replies to comments
INSERT INTO COMMENT (project_id, user_id, content, date_created, parent_comment_id, num_likes)
VALUES 
(1, 2, 'Thanks for the feedback on Fibonacci Fractal Engine!', NOW(), 1, 5),
(3, 2, 'Glad QView3D works well for you!', NOW(), 3, 3);

-- Commands to Verify the Setup

-- Select the database
USE project_db;

-- Show all tables in the selected database
SHOW TABLES;

-- View the structure of each table
DESCRIBE ADMIN;
DESCRIBE USER;
DESCRIBE PROJECT;
DESCRIBE COMMENT;

-- Queries for verifying relationships and data

-- View all admins
SELECT * FROM ADMIN;

-- View all users
SELECT * FROM USER;

-- View all projects with admin info
SELECT 
    PROJECT.project_id, 
    PROJECT.title, 
    PROJECT.intro, 
    PROJECT.paragraph1, 
    PROJECT.paragraph2, 
    PROJECT.paragraph3, 
    PROJECT.date_created, 
    ADMIN.full_name AS admin_name
FROM PROJECT
JOIN ADMIN ON PROJECT.author_id = ADMIN.admin_id;

-- View all comments with user info and project info
SELECT 
    COMMENT.comment_id, 
    COMMENT.content, 
    COMMENT.num_likes, 
    COMMENT.date_created, 
    USER.full_name AS user_name, 
    PROJECT.title AS project_title
FROM COMMENT
JOIN USER ON COMMENT.user_id = USER.user_id
JOIN PROJECT ON COMMENT.project_id = PROJECT.project_id;
